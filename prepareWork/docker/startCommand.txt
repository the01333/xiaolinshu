1. redis
docker run -p 6379:6379 --name redis --restart=always \
--memory="512m" \
-v /soft/docker/redis/conf/redis.conf:/etc/redis/redis.conf \
-v /soft/docker/redis/data:/data \
-d redis:7.2.3 redis-server /etc/redis/redis.conf --appendonly yes

# 下面这个引入了布隆过滤器, 仓库地址: https://github.com/RedisBloom/RedisBloom
# 下载: https://github.com/RedisBloom/RedisBloom/archive/refs/tags/v2.2.18.tar.gz
docker run -p 6379:6379 --name redis --restart=always \
--memory="512m" \
-v /soft/docker/redis/conf/redis.conf:/etc/redis/redis.conf \
-v /soft/docker/redis/data:/data \
-v /soft/docker/redis/modules:/etc/redis/modules \
-d redis:7.2.3 redis-server /etc/redis/redis.conf --appendonly yes

2. nacos
docker run -d --name nacos --privileged -e MODE=standalone --restart=always \
-e JVM_XMX=300m -e JVM_XMS=300m -p 8848:8848 -p 9848:9848 \
-v /soft/docker/nacos/conf:/home/nacos/conf \
-v /soft/docker/nacos/data:/home/nacos/data \
-v /soft/docker/nacos/logs:/home/nacos/logs nacos/nacos-server:v2.2.3

3. minio
docker run -d \
   -p 9000:9000 \
   -p 9090:9090 \
   --name minio --restart=always \
   -v /soft/docker/minio/data:/data \
   -e "MINIO_ROOT_USER=puxinxiaolin" \
   -e "MINIO_ROOT_PASSWORD=puxinxiaolin" \
   minio/minio:RELEASE.2023-09-30T07-02-29Z server /data --console-address ":9090"

4. cassandra
docker run --name cassandra \
--restart=always -d \
-p 9042:9042 \
-v /soft/docker/cassandra/data:/var/lib/cassandra \
cassandra:latest

5. zookeeper
docker run -d --name zookeeper --restart=always \
-p 2181:2181 -e TZ="Asia/Shanghai" \
-v /soft/docker/zookeeper/data:/data \
-v /soft/docker/zookeeper/conf:/conf \
zookeeper:3.5.6

6. rocketmq
# 6.0 创建容器网络
docker network create rocketmq

# 6.1 namesrv
# 6.1.1 先运行并挂载 /soft/docker/rocketmq/namesrv/bin/runserver.sh
docker run -d --privileged=true --name rocketmq-namesrv apache/rocketmq:5.3.1 sh mqnamesrv
docker cp rocketmq-namesrv:/home/rocketmq/rocketmq-5.3.1/bin/runserver.sh /soft/docker/rocketmq/namesrv/bin
docker rm -f rocketmq-namesrv

# 6.1.2 启动 namesrv
docker run -d --network rocketmq \
--privileged=true --restart=always \
--name rocketmq-namesrv -p 9876:9876 \
-v /soft/docker/rocketmq/namesrv/logs:/home/rocketmq/logs \
-v /soft/docker/rocketmq/namesrv/bin/runserver.sh:/home/rocketmq/rocketmq-5.3.1/bin/runserver.sh \
-e "JAVA_TOOL_OPTIONS=-Xms256m -Xmx512m" \
apache/rocketmq:5.3.1 sh mqnamesrv
# 6.1.3 namesrv 日志
docker logs -f rocketmq-namesrv

# 6.2 broker
# 6.2.1 先运行并挂载 /soft/docker/rocketmq/broker/bin/runbroker.sh
docker run -d --name rocketmq-broker --privileged=true apache/rocketmq:5.3.1 sh mqbroker
docker cp rocketmq-broker:/home/rocketmq/rocketmq-5.3.1/bin/runbroker.sh /soft/docker/rocketmq/broker/bin
docker rm -f rocketmq-broker

# 6.2.2 启动 broker
docker run -d --network rocketmq --restart=always \
--name rocketmq-broker --privileged=true \
-p 10912:10912 -p 10911:10911 -p 10909:10909 \
-v /soft/docker/rocketmq/broker/logs:/home/rocketmq/logs/rocketmqlogs \
-v /soft/docker/rocketmq/broker/store:/home/rocketmq/store \
-v /soft/docker/rocketmq/broker/config/broker.conf:/home/rocketmq/rocketmq-5.3.1/conf/broker.conf \
-v /soft/docker/rocketmq/broker/bin/runbroker.sh:/home/rocketmq/rocketmq-5.3.1/bin/runbroker.sh \
-e "JAVA_TOOL_OPTIONS=-Xms512m -Xmx1g" \
--user root \
-e "NAMESRV_ADDR=rocketmq-namesrv:9876" \
apache/rocketmq:5.3.1 sh mqbroker --enable-proxy -c /home/rocketmq/rocketmq-5.3.1/conf/broker.conf

# 6.2.3 验证 Broker 是否启动成功
docker exec -it rocketmq-broker bash -c "tail -n 10 /home/rocketmq/logs/rocketmqlogs/proxy.log"

# 6.3 dashboard
docker run -d \
--name rocketmq-dashboard \
-p 8080:8080 --network rocketmq \
-e "JAVA_OPTS=-Xmx200M -Xms200M -Xmn100M -Drocketmq.namesrv.addr=rocketmq-namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false" \
apacherocketmq/rocketmq-dashboard

7. elasticsearch
docker run -d --name es --restart=always \
-p 9200:9200 -p 9300:9300 \
-e "discovery.type=single-node" \
-e ES_JAVA_OPTS="-Xms1024m -Xmx1024m" \
-v /soft/docker/elasticsearch/config:/usr/share/elasticsearch/config \
-v /soft/docker/elasticsearch/data:/usr/share/elasticsearch/data \
-v /soft/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins \
-v /soft/docker/elasticsearch/logs:/usr/share/elasticsearch/logs \
elasticsearch:7.3.0

7.1 kibana
docker cp kibana:/usr/share/kibana/config E:\docker\kibana
# 然后去修改挂载的 kibana.yml 文件, 之后重新启动
docker run -d --name kibana \
-p 5601:5601 \
-v /soft/docker/kibana/config:/usr/share/kibana/config \
kibana:7.3.0

7.2 ik 分词器
docker exec -it es bash
bin/elasticsearch-plugin install https://get.infini.cloud/elasticsearch/analysis-ik/7.3.0
exit
docker cp es:/usr/share/elasticsearch/plugins/analysis-ik /soft/docker/elasticsearch/plugins
docker cp es:/usr/share/elasticsearch/config/analysis-ik /soft/docker/elasticsearch/config
docker restart es
